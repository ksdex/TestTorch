{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\JoystickBG2.js"],"names":["Common","require","cc","Class","extends","Component","properties","dot","default","type","Node","displayName","publicAngle","_joyCom","_playerNode","_angle","_radian","_speed","_speed1","_speed2","_opacity","_timeStart","_timeLimit","onLoad","node","parent","getComponent","sprite","touchType","TouchType","DEFAULT","_initTouchEvent","Date","valueOf","self","on","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","update","dt","directionType","DirectionType","ALL","_allDirectionsMove","rotation","_getDistance","pos1","pos2","Math","sqrt","pow","x","y","_getRadian","point","PI","_getAngle","pos","getPosition","atan2","_setSpeed","distance","_radius","event","touchPos","convertToNodeSpaceAR","getLocation","p","radius","width","_stickPos","posX","posY","setPosition","cos","sin"],"mappings":"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","file":"JoystickBG2.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["var Common = require('JoystickCommon');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        dot: {\n            default: null,\n            type: cc.Node,\n            displayName: '摇杆节点',\n        },\n        publicAngle:{\n            default:0,\n            displayName:'当前角度'\n        },\n      \n        _joyCom: {\n            default: null,\n            displayName: 'joy Node',\n\n        },\n\n        _playerNode: {\n            default: null,\n            displayName: '被操作的目标Node',\n        },\n\n        _angle: {\n            default: null,\n            displayName: '当前触摸的角度',\n\n        },\n\n        _radian: {\n            default: null,\n            displayName: '弧度',\n        },\n\n\n        _speed: 0,          //实际速度\n        _speed1: 1,         //一段速度\n        _speed2: 2,         //二段速度\n        _opacity: 0,        //透明度\n        _timeStart: 0,\n        _timeLimit: 0,\n    },\n\n\n\n    onLoad: function()\n    {\n        // joy下的Joystick2组件\n        this._joyCom = this.node.parent.getComponent('Joystick2');\n        // Joystick2组件下的player节点\n        this._playerNode = this._joyCom.sprite;\n\n        if(this._joyCom.touchType == Common.TouchType.DEFAULT){\n            //对圆圈的触摸监听\n            this._initTouchEvent();\n        }\n        this._timeStart = (new Date()).valueOf();\n        this._timeLimit = this._timeStart + 5000;\n        this._angle = -90;\n    },\n\n\n    //对圆圈的触摸监听\n    _initTouchEvent: function()\n    {\n        var self = this;\n\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\n\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoveEvent, self);\n\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\n    },\n\n    //更新移动目标\n    update: function(dt)\n    {\n        this._timeStart = (new Date()).valueOf();\n       \n        switch (this._joyCom.directionType)\n        {\n            case Common.DirectionType.ALL:\n                this._allDirectionsMove();\n                break;\n            default :\n                break;\n        }\n    },\n     //全方向旋转\n    _allDirectionsMove: function()\n    {\n        this._playerNode.rotation = 270 -(this._angle);\n        this.publicAngle = this._angle;\n    },\n\n     //计算两点间的距离并返回\n    _getDistance: function(pos1, pos2)\n    {\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) +\n        Math.pow(pos1.y - pos2.y, 2));\n    },\n\n    /*角度/弧度转换\n    角度 = 弧度 * 180 / Math.PI\n    弧度 = 角度 * Math.PI / 180*/\n    //计算弧度并返回\n    _getRadian: function(point)\n    {\n        this._radian = Math.PI / 180 * this._getAngle(point);\n        return this._radian;\n    },\n\n    //计算角度并返回\n    _getAngle: function(point)\n    {\n\n        var pos = this.node.getPosition();\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180/Math.PI);\n\n        if(this._timeStart < this._timeLimit )\n        {\n            return 90;\n        }\n        else\n        { \n            return this._angle;\n        }\n    },\n\n     //设置实际速度\n    _setSpeed: function(point)\n    {\n        //触摸点和遥控杆中心的距离\n        var distance = this._getDistance(point, this.node.getPosition());\n\n        //如果半径\n        if(distance < this._radius)\n        {\n            this._speed = this._speed1;\n        }\n        else\n        {\n            this._speed = this._speed2;\n        }\n    },\n\n    _touchStartEvent: function(event) {\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        //触摸点与圆圈中心的距离\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        //圆圈半径\n        var radius = this.node.width / 2;\n        // 记录摇杆位置，给touch move使用\n        this._stickPos = touchPos;\n        var posX = this.node.getPosition().x + touchPos.x;\n        var posY = this.node.getPosition().y + touchPos.y;\n         //手指在圆圈内触摸,控杆跟随触摸点\n        if(radius > distance)\n        {\n            this.dot.setPosition(cc.p(posX, posY));\n            return true;\n        }\n        return false;\n    },\n\n    _touchMoveEvent: function(event){\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        var distance = this._getDistance(touchPos,cc.p(0,0));\n        var radius = this.node.width / 2;\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\n        var posX = this.node.getPosition().x + touchPos.x;\n        var posY = this.node.getPosition().y + touchPos.y;\n        if(radius > distance)\n        {\n            this.dot.setPosition(cc.p(posX, posY));\n        }\n        else\n        {\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\n            var x = this.node.getPosition().x + Math.cos(this._getRadian(cc.p(posX,posY))) * radius;\n            var y = this.node.getPosition().y + Math.sin(this._getRadian(cc.p(posX,posY))) * radius;\n            this.dot.setPosition(cc.p(x, y));\n        }\n        //更新角度\n        this._getAngle(cc.p(posX,posY));\n        //设置实际速度\n        this._setSpeed(cc.p(posX,posY));\n\n    },\n\n    _touchEndEvent: function(){\n        this.dot.setPosition(this.node.getPosition());\n        this._speed = 0;\n    },\n});\n"]}